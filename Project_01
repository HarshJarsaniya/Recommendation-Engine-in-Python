import pandas as pd

# import Dataset  
data = pd.read_csv(r"C:\Users\USER\Desktop\Dataset\Movies dataset\n_movies.csv", encoding = 'utf8')
data.info()
data.shape # shape
data.columns
data.genre # genre columns
data.isnull().sum() #Check the null value, Here nullvalue present in this dataset
data = data.dropna()
data.isnull().sum() ##Check the null value, Here nullvalue is not present in this dataset


duplicate = data.duplicated()  # Find the duplicate 
duplicate   #Output shows the False which means No dupicates are here
sum(duplicate)  #Total number of Duplicates (Here total number of the duplicates is Zero, So we don't need to remove the duplicates)

from sklearn.feature_extraction.text import TfidfVectorizer #term frequencey- inverse document frequncy is a numerical statistic that is intended to reflect how important a word is to document in a collecion or corpus

# Creating a Tfidf Vectorizer to remove all stop words
tfidf = TfidfVectorizer(stop_words = "english")    # taking stop words from tfid vectorizer 

# Preparing the Tfidf matrix by fitting and transforming
tfidf_matrix = tfidf.fit_transform(data.genre)   #Transform a count matrix to a normalized tf or tf-idf representation
tfidf_matrix.shape #5754,30


from sklearn.metrics.pairwise import linear_kernel

# Computing the cosine similarity on Tfidf matrix
cosine_sim_matrix = linear_kernel(tfidf_matrix, tfidf_matrix)

# creating a mapping of Movie name to index number 
data_index = pd.Series(data.index, index = data['title']).drop_duplicates()

data_id = data_index["Jogi"]
data_id

def get_recommendations(title, topN):    
    # topN = 10
    # Getting the movie index using its title 
    data_id = data_index[title]
    
    # Getting the pair wise similarity score for all the Movie name with that 
    cosine_scores = list(enumerate(cosine_sim_matrix[data_id]))
    
    # Sorting the cosine_similarity scores based on scores 
    cosine_scores = sorted(cosine_scores, key=lambda x:x[1], reverse = True)
    
    # Get the scores of top N most similar movies 
    cosine_scores_N = cosine_scores[0: topN+1]
    
    # Getting the movie index 
    data_idx  =  [i[0] for i in cosine_scores_N]
    data_scores =  [i[1] for i in cosine_scores_N]
    
    # Similar movies and scores
    data_similar_show = pd.DataFrame(columns=["title", "genre"])
    data_similar_show["title"] = data.loc[data_idx, "title"]
    data_similar_show["genre"] = data_scores
    data_similar_show.reset_index(inplace = True)  
    # data_similar_show.drop(["index"], axis=1, inplace=True)
    print (data_similar_show)
    # return (data_similar_show)

# Enter your Movie and number of Movies to be recommended 
get_recommendations("Baby Driver", topN = 10)
data_index["Baby Driver"]
